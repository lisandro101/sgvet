/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelConfiguracion.java
 *
 * Created on 30/09/2009, 16:19:46
 */
package sgvet.igu;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.persistence.Query;
import sgvet.entidades.Politica;
import sgvet.entidades.ProductoComponente;
import sgvet.entidades.auxiliares.DTOPedidos;
import sgvet.gestores.GestorFecha;
import sgvet.gestores.GestorRevisionPeriodica;
import sgvet.gestores.IObservadorFecha;
import sgvet.persistencia.FachadaPersistencia;
import sgvet.utils.IValidable;

/**
 *
 * @author stafoxter
 */
public class PanelConfiguracion extends javax.swing.JDialog implements IValidable {

    private static final long serialVersionUID = 1L;
    List<IObservadorFecha> observadores;

    /** Creates new form PanelConfiguracion
     * @param parent
     * @param modal 
     */
    public PanelConfiguracion(java.awt.Frame parent, boolean modal) {

        super(parent, modal);
        initComponents();
        inicializar();

    }

    private void inicializar() {

        observadores = new ArrayList<IObservadorFecha>();
        dpFechaActual.setDate(GestorFecha.getInstancia().getFechaHoy());
        agregarObservador(GestorRevisionPeriodica.getInstancia());

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dpFechaActual = new org.jdesktop.swingx.JXDatePicker();
        lbFechaActual = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btRetrocederPeriodo = new javax.swing.JButton();
        btAplicar = new javax.swing.JButton();
        btAvanzarPeriodo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Configuraci√≥n");

        dpFechaActual.setDate(new Date());
        dpFechaActual.setFormats("dd/MM/yyyy");
        dpFechaActual.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dpFechaActualActionPerformed(evt);
            }
        });

        lbFechaActual.setText("Fecha Actual:");

        btRetrocederPeriodo.setText("<");
        btRetrocederPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRetrocederPeriodoActionPerformed(evt);
            }
        });
        jPanel1.add(btRetrocederPeriodo);

        btAplicar.setText("Aplicar");
        btAplicar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAplicarActionPerformed(evt);
            }
        });
        jPanel1.add(btAplicar);

        btAvanzarPeriodo.setText(">");
        btAvanzarPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAvanzarPeriodoActionPerformed(evt);
            }
        });
        jPanel1.add(btAvanzarPeriodo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lbFechaActual)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dpFechaActual, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbFechaActual)
                    .addComponent(dpFechaActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dpFechaActualActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dpFechaActualActionPerformed
//        GestorFecha.getInstancia().setFechaHoy(dpFechaActual.getDate());
}//GEN-LAST:event_dpFechaActualActionPerformed

    private void btAplicarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAplicarActionPerformed

        GestorFecha.getInstancia().setFechaHoy(dpFechaActual.getDate());
        notificar();

}//GEN-LAST:event_btAplicarActionPerformed

    private void btRetrocederPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRetrocederPeriodoActionPerformed

        Date nuevaFecha = GestorFecha.getInstancia().sumarDiasALaFecha(dpFechaActual.getDate(), -28);
        dpFechaActual.setDate(nuevaFecha);

}//GEN-LAST:event_btRetrocederPeriodoActionPerformed

    private void btAvanzarPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAvanzarPeriodoActionPerformed

        Date nuevaFecha = GestorFecha.getInstancia().sumarDiasALaFecha(dpFechaActual.getDate(), 28);
        dpFechaActual.setDate(nuevaFecha);

    }//GEN-LAST:event_btAvanzarPeriodoActionPerformed

    @Override
    public List<Component> getComponentesObligatorios() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAplicar;
    private javax.swing.JButton btAvanzarPeriodo;
    private javax.swing.JButton btRetrocederPeriodo;
    private org.jdesktop.swingx.JXDatePicker dpFechaActual;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbFechaActual;
    // End of variables declaration//GEN-END:variables

    @Deprecated
    private void buscarProductosConPoliticaSR() {
        List<ProductoComponente> productos;
        List<ProductoComponente> resultado = new ArrayList<ProductoComponente>();
        Query consulta = FachadaPersistencia.getInstancia().crearConsulta(
                "Select a from ProductoComponente a where a.borrado=false");

        productos = FachadaPersistencia.getInstancia().buscar(ProductoComponente.class, consulta);

        if (productos.size() > 0) {
            System.out.println("\n Cant detalles de produccion encontrados:" + productos.size() + "\n");
        }

        for (ProductoComponente producto : productos) {
            if (producto.getPolitica() != null) {
                if (producto.getPolitica().getTipoPolitica().equals(Politica.TipoPolitica.PERIODICA)) {
                    resultado.add(producto);
                }
            }
        }

        calcularR(resultado);
    }

    @Deprecated
    private void calcularR(List<ProductoComponente> productos) {
        double r[] = new double[productos.size()];
        for (int i = 0; i < productos.size(); i++) {
            GestorRevisionPeriodica.getInstancia().cargarGestorRevisionPeriodica(productos.get(i));
            r[i] = GestorRevisionPeriodica.getInstancia().getPeriodoDeRevision();

        }

        List<DTOPedidos> pedidos = new ArrayList<DTOPedidos>();

        for (int i = 0; i < productos.size(); i++) {
            double diferencia;
            Calendar fechaHoy = null;
            Calendar fechaProd = null;
            DTOPedidos ped;

            if (productos.get(i).getFechaUltimaRevision() == null) {
                GestorRevisionPeriodica.getInstancia().cargarGestorRevisionPeriodica(productos.get(i));
                ped = new DTOPedidos(productos.get(i), GestorRevisionPeriodica.getInstancia().getCantidadAPedir());
                pedidos.add(ped);
            } else {
                if ((GestorFecha.getInstancia().getFechaHoy().compareTo(productos.get(i).getFechaUltimaRevision()) > 0)) {
                    fechaHoy.setTime(GestorFecha.getInstancia().getFechaHoy());
                    fechaProd.setTime(productos.get(i).getFechaUltimaRevision());
                    diferencia = (fechaHoy.getTimeInMillis() - fechaProd.getTimeInMillis()) / 3600000;

                    if (diferencia >= r[i]) {
                        GestorRevisionPeriodica.getInstancia().cargarGestorRevisionPeriodica(productos.get(i));
                        ped = new DTOPedidos(productos.get(i),
                                GestorRevisionPeriodica.getInstancia().getCantidadAPedir());
                        pedidos.add(ped);
                    }
                }
            }
        }

        realizarPedidos(pedidos);
    }

    private void realizarPedidos(List<DTOPedidos> pedidos) {

        PanelPedidosPeriodica panel = new PanelPedidosPeriodica(pedidos);
        panel.setLocationRelativeTo(this);
        panel.setModal(true);
        panel.setVisible(true);

    }

    private void notificar() {
        for (IObservadorFecha obs : observadores) {
            obs.actualizar();
        }
    }

    /**
     * Este metodo agrega a cualquier clase interesada en saber cuando cambia la fecha actual, esta clase debe
     * implementar la interfaz IObservadorFecha.
     * @param obs
     */
    public void agregarObservador(IObservadorFecha obs) {
        observadores.add(obs);
    }
}
